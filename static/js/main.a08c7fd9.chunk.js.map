{"version":3,"sources":["components/EventListItem.tsx","components/EventList.tsx","actions/events.ts","constants/actionTypes.ts","actions/sources.ts","cotnainers/EventListContainer.ts","components/FilterPanel.tsx","cotnainers/FilterPanelContainer.ts","actions/filters.ts","components/EventDetail.tsx","cotnainers/EventDetailContainer.ts","App.tsx","serviceWorker.ts","reducers/list.ts","reducers/filter.ts","reducers/meta.ts","reducers/details.ts","index.tsx","reducers/index.ts"],"names":["EventListItem","List","Item","onClick","this","props","className","event","closed","title","React","Component","EventList","loading","Loader","size","events","length","bordered","hover","autoScroll","map","key","id","selectEvent","serviceUrl","process","requestDetail","type","receiveDetail","json","payload","requestItems","receiveEvents","receiveSources","connect","state","list","dispatch","fetch","then","response","fetchDetails","statusData","label","value","sortOptions","FilterPanel","showControls","range","from","to","statuses","sources","sort","close","bind","toggleDrawer","submit","getSources","setState","updateFilters","ButtonToolbar","Button","appearance","Drawer","show","onHide","Header","Title","Body","ControlLabel","DateRangePicker","onChange","CheckPicker","data","s","searchable","SelectPicker","Footer","ownProps","filter","meta","filterData","url","URL","searchParams","append","toISOString","join","toString","EventDetail","Panel","header","shaded","description","detail","App","FilterPanelContainer","EventListContainer","EventDetailContainer","Boolean","window","location","hostname","match","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a08c7fd9.chunk.js","sourcesContent":["import EventModel from \"../models/Event\";\r\nimport React from \"react\";\r\nimport { List } from \"rsuite\";\r\n\r\nexport interface EventListProps {\r\n  event: EventModel,\r\n  onClick: Function\r\n}\r\n\r\nexport default class EventListItem extends React.Component<EventListProps> {\r\n\r\n  render() {\r\n    return (\r\n      <List.Item onClick={this.props.onClick} className=\"cursor-pointer\">\r\n        <span className={this.props.event.closed ? 'line-through' : ''}>\r\n          {this.props.event.title}\r\n        </span>\r\n      </List.Item>\r\n\r\n    );\r\n  }\r\n}","import EventModel from \"../models/Event\";\r\nimport React from \"react\";\r\nimport EventListItem from \"./EventListItem\";\r\nimport { Loader, List } from \"rsuite\";\r\n\r\n\r\nexport interface EventListData {\r\n  events: EventModel[],\r\n  loading: boolean,\r\n}\r\n\r\nexport interface EventListActions {\r\n  selectEvent: Function\r\n}\r\n\r\ntype EventListProps = EventListData & EventListActions;\r\n\r\nexport default class EventList extends React.Component<EventListProps> {\r\n\r\n  render() {\r\n    if (this.props.loading) {\r\n      return (<Loader size=\"lg\" className=\"mx-5 my-5\" />);\r\n    }\r\n\r\n    return this.props.events?.length ?\r\n      (<List bordered hover autoScroll={true}>\r\n        {this.props.events.map(event =>\r\n          <EventListItem key={event.id} event={event} onClick={() => this.props.selectEvent(event.id)}></EventListItem>)}\r\n      </List>)\r\n      : <span>No items to show.</span>\r\n\r\n  }\r\n}","import { AnyAction, Dispatch } from \"redux\";\r\nimport { FilterData, updateFilters } from \"./filters\";\r\nimport { REQUEST_DETAIL, RECEIVE_DETAIL, RECEIVE_EVENTS, REQUEST_EVENTS } from \"../constants/actionTypes\";\r\n\r\nconst serviceUrl = process.env.REACT_APP_API_URL;\r\n\r\nexport const fetchItems = (filterData: FilterData) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(updateFilters(filterData))\r\n        dispatch(requestItems());\r\n        var url = new URL(`${serviceUrl}/naturalevents`);\r\n\r\n        filterData.from && url.searchParams.append('from', filterData.from.toISOString());\r\n        filterData.to && url.searchParams.append('to', filterData.to.toISOString());\r\n        filterData.sources.length > 0 && url.searchParams.append('source', filterData.sources.join(','));\r\n        filterData.statuses.length > 0 && url.searchParams.append('status', filterData.statuses.join(','));\r\n        filterData.sort && url.searchParams.append('sort', filterData.sort)\r\n\r\n        return fetch(url.toString())\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                dispatch(receiveEvents(json));\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchDetails = (id: string) => (dispatch: Dispatch) => {\r\n    dispatch(requestDetail());\r\n    return fetch(`${serviceUrl}/naturalevents/${id}`)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            dispatch(receiveDetail(json));\r\n        })\r\n}\r\n\r\nexport const requestDetail = () => {\r\n    return { type: REQUEST_DETAIL }\r\n}\r\n\r\nexport const receiveDetail = (json: any): AnyAction => {\r\n    return {\r\n        type: RECEIVE_DETAIL,\r\n        payload: json\r\n    }\r\n}\r\n\r\nconst requestItems = (): AnyAction => {\r\n    return { type: REQUEST_EVENTS }\r\n}\r\n\r\n\r\nconst receiveEvents = (json: any): AnyAction => {\r\n    return {\r\n        type: RECEIVE_EVENTS,\r\n        events: json,\r\n    }\r\n}\r\n\r\n\r\n","export const REQUEST_DETAIL = 'REQUEST_DETAIL'\r\nexport const RECEIVE_DETAIL = 'RECEIVE_DETAIL'\r\nexport const REQUEST_EVENTS = 'REQUEST_EVENTS'\r\nexport const RECEIVE_EVENTS = 'RECEIVE_EVENTS'\r\n\r\nexport const UPDATE_FILTERS = 'UPDATE_FILTERS';\r\n\r\n\r\nexport const RECEIVE_SOURCES = 'RECEIVE_SOURCES';","import { Dispatch, AnyAction } from \"redux\";\r\nimport { RECEIVE_SOURCES } from \"../constants/actionTypes\";\r\n\r\nconst serviceUrl = process.env.REACT_APP_API_URL;\r\n\r\nexport const fetchSources = () => {\r\n    return (dispatch: Dispatch) => {\r\n        return fetch(`${serviceUrl}/sources`)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                dispatch(receiveSources(json));\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst receiveSources = (json: any): AnyAction => {\r\n    return {\r\n        type: RECEIVE_SOURCES,\r\n        payload: json,\r\n    }\r\n}","import { connect } from 'react-redux'\r\nimport { AppState } from '../reducers'\r\nimport EventList  from \"../components/EventList\";\r\nimport { fetchDetails } from '../actions';\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    events: state.list.events,\r\n    loading: state.list.loading\r\n  });\r\n\r\n  const mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n      selectEvent: (id: string) => dispatch(fetchDetails(id))\r\n    };\r\n  }\r\n\r\n  export default connect(mapStateToProps, mapDispatchToProps)(EventList)","import React from \"react\";\r\nimport { Button, ButtonToolbar, Drawer, FormGroup, Form, ControlLabel, FormControl, HelpBlock, DateRangePicker, CheckPicker, SelectPicker } from 'rsuite';\r\nimport { FilterData } from \"../actions\";\r\nimport SourceModel from \"../models/Source\";\r\n\r\nexport interface FilterPanelData {\r\n    from?: Date,\r\n    to?: Date,\r\n    sources: SourceModel[],\r\n    sort: string,\r\n\r\n    className: string\r\n}\r\n\r\nexport interface FilterPanelActions {\r\n    updateFilters: (arg0: FilterData) => any,\r\n    getSources: () => any\r\n}\r\n\r\ntype FilterPanelProps = FilterPanelData & FilterPanelActions\r\n\r\nexport interface FilterPanelState {\r\n    showControls: boolean,\r\n    range: [Date?, Date?],\r\n    statuses: string[],\r\n    sources: string[],\r\n    sort: ''\r\n}\r\n\r\nconst statusData =\r\n    [\r\n        {\r\n            label: \"Open\",\r\n            value: \"open\"\r\n        },\r\n        {\r\n            label: \"Closed\",\r\n            value: \"closed\"\r\n        }\r\n    ];\r\n\r\nconst sortOptions = [\r\n    {\r\n        label: \"Ascending\",\r\n        value: \"asc\"\r\n    },\r\n    {\r\n        label: \"Descending\",\r\n        value: \"desc\"\r\n    }\r\n]\r\n\r\n\r\nexport default class FilterPanel extends React.Component<FilterPanelProps, FilterPanelState> {\r\n    constructor(props: FilterPanelProps) {\r\n        super(props);\r\n        this.state = {\r\n            showControls: false,\r\n            range: [props.from, props.to],\r\n            statuses: [],\r\n            sources: [],\r\n            sort: \"\"\r\n        };\r\n        this.close = this.close.bind(this);\r\n        this.toggleDrawer = this.toggleDrawer.bind(this);\r\n        this.submit = this.submit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getSources();\r\n    }\r\n    toggleDrawer() {\r\n        this.setState({ showControls: true });\r\n    }\r\n    close() {\r\n        this.setState({\r\n            showControls: false\r\n        });\r\n    }\r\n\r\n    submit() {\r\n        this.close();\r\n        this.props.updateFilters({ from: this.state.range[0], to: this.state.range[1], sources: this.state.sources, statuses: this.state.statuses, sort: this.state.sort })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ButtonToolbar className={this.props.className}>\r\n                    <Button onClick={this.toggleDrawer}>Filters</Button>\r\n                    <Button onClick={this.submit} appearance=\"primary\">Search</Button>\r\n                </ButtonToolbar>\r\n                <Drawer\r\n                    show={this.state.showControls}\r\n                    onHide={this.close}\r\n                >\r\n                    <Drawer.Header>\r\n                        <Drawer.Title>Filters</Drawer.Title>\r\n                    </Drawer.Header>\r\n                    <Drawer.Body>\r\n\r\n                        <div className=\"field mb-4\">\r\n                            <ControlLabel>Dates</ControlLabel>\r\n                            <div>\r\n                                <DateRangePicker className=\"block\"\r\n                                    value={this.state.range}\r\n                                    onChange={(value) => {\r\n                                        this.setState({ range: value });\r\n                                    }} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field mb-4\">\r\n                            <ControlLabel>Sources</ControlLabel>\r\n                            <div>\r\n                                <CheckPicker\r\n                                    data={this.props.sources.map(s => { return { label: s.title, value: s.id } })}\r\n                                    onChange={(value) => this.setState({ sources: value })}\r\n                                    value={this.state.sources} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field mb-4\">\r\n\r\n                            <ControlLabel>Statuses</ControlLabel>\r\n                            <div>\r\n                                <CheckPicker\r\n                                    data={statusData}\r\n                                    onChange={(value) => this.setState({ statuses: value })}\r\n                                    searchable={false}\r\n                                    value={this.state.statuses} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field mb-4\">\r\n                            <ControlLabel>Sort</ControlLabel>\r\n                            <div>\r\n                                <SelectPicker\r\n                                    data={sortOptions}\r\n                                    onChange={(value) => this.setState({ sort: value })}\r\n                                    searchable={false}\r\n                                    value={this.state.sort} />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </Drawer.Body>\r\n                    <Drawer.Footer>\r\n                        <Button onClick={this.submit} appearance=\"primary\">Search</Button>\r\n                        <Button onClick={this.close} appearance=\"subtle\">Cancel</Button>\r\n                    </Drawer.Footer>\r\n                </Drawer >\r\n            </div >\r\n        );\r\n    }\r\n}","import { AppState } from \"../reducers\";\r\nimport { fetchItems, FilterData, fetchSources } from \"../actions\";\r\nimport FilterPanel, { FilterPanelData, FilterPanelActions } from \"../components/FilterPanel\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = (state: AppState, ownProps: any) : FilterPanelData => {\r\n    return {\r\n        from: state.filter.from,\r\n        to: state.filter.to,\r\n        sources: state.meta.sources,\r\n        sort: state.filter.sort,\r\n        ...ownProps\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any): FilterPanelActions => {\r\n    return {\r\n        updateFilters: (data: FilterData) => dispatch(fetchItems(data)),\r\n        getSources: () => dispatch(fetchSources())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterPanel);","import { UPDATE_FILTERS } from \"../constants/actionTypes\"\r\n\r\nexport interface FilterData {\r\n    from?: Date,\r\n    to?: Date,\r\n    sources: string[],\r\n    statuses: string[],\r\n    sort: string\r\n}\r\n\r\nexport const updateFilters = (filterData: FilterData) => {\r\n    return {\r\n        type: UPDATE_FILTERS,\r\n        payload: filterData\r\n    }\r\n}\r\n\r\n","import EventModel from \"../models/Event\";\r\nimport React from \"react\";\r\nimport { Loader, Panel } from \"rsuite\";\r\n\r\nexport interface EventDetailData {\r\n    event?: EventModel | null,\r\n    loading: boolean\r\n}\r\n\r\nexport interface OwnProps {\r\n    className: string;\r\n}\r\n\r\ntype EventDetailProps = EventDetailData & OwnProps\r\n\r\n\r\n\r\nexport default class EventDetail extends React.Component<EventDetailProps> {\r\n\r\n\r\n    render() {\r\n        if (this.props.loading) {\r\n            return (<Loader size=\"lg\" />);\r\n        }\r\n        return this.props.event ?\r\n            (<Panel header={this.props.event.title} shaded className={this.props.className}>\r\n                {this.props.event.description &&\r\n                    <div>\r\n                        <h2>Description</h2>\r\n                        <p>{this.props.event.description}</p>\r\n                    </div>}\r\n\r\n                {this.props.event.closed &&\r\n                    <p>Closed on: {this.props.event.closed}</p>\r\n                }\r\n            </Panel>)\r\n            : (<div></div>);\r\n    }\r\n}","import { connect } from 'react-redux'\r\nimport { AppState } from '../reducers'\r\nimport EventDetail, { EventDetailData } from '../components/EventDetail';\r\n\r\nconst mapStateToProps = (state: AppState, ownProps: any) : EventDetailData => ({\r\n    event: state.detail.event,\r\n    loading: state.detail.loading,\r\n    ...ownProps\r\n  });\r\n\r\n  export default connect(mapStateToProps)(EventDetail)","import React from 'react';\n\nimport EventListContainer from './cotnainers/EventListContainer';\nimport FilterPanelContainer from './cotnainers/FilterPanelContainer';\nimport EventDetailContainer from './cotnainers/EventDetailContainer';\n\nimport './App.scss';\n\n\nfunction App() {\n  return (\n    <div className=\"container app h-screen mx-auto\">\n      <header>\n        <h1>Natural events</h1>\n\n      </header>\n      <div className=\"list\">\n        <FilterPanelContainer className=\"mb-2\"></FilterPanelContainer>\n        <EventListContainer></EventListContainer>\n      </div>\n      <div className=\"detail\">\n        <EventDetailContainer className=\"h-full w-full\"></EventDetailContainer>\n      </div>\n      <footer></footer>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import EventModel from \"../models/Event\";\r\nimport { RECEIVE_EVENTS, REQUEST_EVENTS } from \"../constants/actionTypes\";\r\n\r\nexport interface EventListState {\r\n    events: EventModel[],\r\n    loading: boolean\r\n}\r\n\r\nexport function defaultEventListState(): EventListState {\r\n    return {\r\n        events: [],\r\n        loading: false\r\n    };\r\n}\r\n\r\nconst list = (state: EventListState, action: any): EventListState => {\r\n    switch (action.type) {\r\n        case RECEIVE_EVENTS:\r\n            return {\r\n                ...state,\r\n                events: action.events,\r\n                loading: false\r\n            }\r\n        case REQUEST_EVENTS: {\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default list;","import { format } from \"path\";\r\nimport { UPDATE_FILTERS } from \"../constants/actionTypes\";\r\n\r\nexport interface FilterState {\r\n    sort: string;\r\n    from?: Date\r\n    to?: Date,\r\n    sources: string[],\r\n    statuses: string[]\r\n}\r\n\r\nexport function defaultFilterState(): FilterState {\r\n    return {\r\n        sort: '',\r\n        statuses: [],\r\n        sources: []\r\n    };\r\n}\r\n\r\nexport default (state: FilterState, action: any): FilterState => {\r\n    switch (action.type) {\r\n        case UPDATE_FILTERS:\r\n            return {\r\n                ...state,\r\n                from: action.payload.from,\r\n                to: action.payload.to\r\n            }\r\n\r\n        default:\r\n            break;\r\n    }\r\n    return state;\r\n}","import { format } from \"path\";\r\nimport SourceModel from \"../models/Source\";\r\nimport { RECEIVE_SOURCES } from \"../constants/actionTypes\";\r\n\r\nexport interface MetaState {\r\n    sources: SourceModel[]\r\n}\r\n\r\nexport function defaultMetaState(): MetaState {\r\n    return { sources: [] };\r\n}\r\n\r\nexport default (state: MetaState, action: any): MetaState => {\r\n    switch (action.type) {\r\n        case RECEIVE_SOURCES:\r\n            return {\r\n                ...state,\r\n                sources: action.payload\r\n            }\r\n\r\n        default:\r\n            break;\r\n    }\r\n    return state;\r\n}","import EventModel from \"../models/Event\";\r\nimport { RECEIVE_DETAIL, REQUEST_DETAIL } from \"../constants/actionTypes\";\r\n\r\nexport interface DetailsState {\r\n    event?: EventModel | null,\r\n    loading: boolean\r\n}\r\n\r\nexport function defaultDetailState(): DetailsState {\r\n    return {\r\n        event: null,\r\n        loading: false\r\n    };\r\n}\r\n\r\nconst detail = (state: DetailsState, action: any): DetailsState => {\r\n    switch (action.type) {\r\n        case RECEIVE_DETAIL:\r\n            return {\r\n                ...state,\r\n                event: action.payload,\r\n                loading: false\r\n            }\r\n        case REQUEST_DETAIL: {\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default detail;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { mainReducer, defaultState } from './reducers';\nimport thunk from 'redux-thunk';\n\nimport './styles/tailwind.css';\nimport 'rsuite/dist/styles/rsuite-default.css';\n\nconst store = createStore(mainReducer, defaultState(), applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import list, { EventListState, defaultEventListState } from './list';\r\nimport filter, { FilterState, defaultFilterState } from './filter';\r\nimport meta, { defaultMetaState, MetaState } from './meta';\r\nimport detail, { DetailsState, defaultDetailState } from './details';\r\n\r\nexport interface AppState {\r\n    list: EventListState,\r\n    filter: FilterState,\r\n    meta: MetaState,\r\n    detail: DetailsState\r\n}\r\n\r\nexport function defaultState() : AppState {\r\n  return {\r\n    list: defaultEventListState(),\r\n    filter: defaultFilterState(),\r\n    meta: defaultMetaState(),\r\n    detail: defaultDetailState()\r\n  };\r\n}\r\n\r\n\r\nexport function mainReducer(state: AppState = defaultState(), action: any) {\r\n  return {\r\n      list: list(state.list, action),\r\n      filter: filter(state.filter, action),\r\n      meta: meta(state.meta, action),\r\n      detail: detail(state.detail, action)\r\n  }\r\n}"],"sourceRoot":""}